USE shop;

-- Практическое задание по теме «Операторы, фильтрация, сортировка и ограничение»

-- -------------------------------------------------------------------------------------------------------------------------------
/* 
 * Задание 1. 
 * Пусть в таблице users поля created_at и updated_at оказались незаполненными. Заполните их текущими датой и временем.
 */
-- -------------------------------------------------------------------------------------------------------------------------------

SELECT * FROM users;
-- Таблица users была пустой. Добавим пару записей и заполним текущими датой и временем 
INSERT INTO users (name,birthday_at,created_at,updated_at) VALUES 
	('user_1','2001-11-20 00:00:00',NULL,NULL),
	('user_2','2007-04-20 00:00:00',NULL,NULL),
	('user_3','1956-05-20 00:00:00',NULL,NULL),
	('user_4','1996-01-20 00:00:00',NULL,NULL),
	('user_5','1982-12-20 00:00:00',NULL,NULL),
	('user_6','1999-05-20 00:00:00',NULL,NULL);
UPDATE users SET created_at = NOW(),updated_at = NOW();

-- -------------------------------------------------------------------------------------------------------------------------------
/* 
 * Задание 2. 
 * Таблица users была неудачно спроектирована. Записи created_at и updated_at были заданы типом VARCHAR и в них долгое время помещались значения в формате 20.10.2017 8:10.
 * Необходимо преобразовать поля к типу DATETIME, сохранив введённые ранее значения.
 */
-- -------------------------------------------------------------------------------------------------------------------------------

-- Изменяем тип колонок created_at и updated_at с VARCHAR на DATETIME и проверяем изменения
ALTER TABLE users MODIFY COLUMN created_at DATETIME, MODIFY COLUMN updated_at DATETIME;
DESC users;
SELECT * FROM users;

-- -------------------------------------------------------------------------------------------------------------------------------
/*
 * Задание 3. 
 * В таблице складских запасов storehouses_products в поле value могут встречаться самые разные цифры: 0, если товар закончился и выше нуля, если на складе имеются запасы.
 * Необходимо отсортировать записи таким образом, чтобы они выводились в порядке увеличения значения value. Однако нулевые запасы должны выводиться в конце, после всех записей.
 */
-- -------------------------------------------------------------------------------------------------------------------------------
  
SELECT * FROM storehouses_products;
INSERT INTO storehouses_products(storehouse_id,product_id,value) VALUES 
	(FLOOR(1 + RAND() * 15),FLOOR(1 + RAND() * 20),'0'),
	(FLOOR(1 + RAND() * 15),FLOOR(1 + RAND() * 20),'0'),
	(FLOOR(1 + RAND() * 15),FLOOR(1 + RAND() * 20),'0'),
	(FLOOR(1 + RAND() * 15),FLOOR(1 + RAND() * 20),FLOOR(RAND() * 100)),
	(FLOOR(1 + RAND() * 15),FLOOR(1 + RAND() * 20),FLOOR(RAND() * 100)),
	(FLOOR(1 + RAND() * 15),FLOOR(1 + RAND() * 20),FLOOR(RAND() * 100)),
	(FLOOR(1 + RAND() * 15),FLOOR(1 + RAND() * 20),FLOOR(RAND() * 100)),
	(FLOOR(1 + RAND() * 15),FLOOR(1 + RAND() * 20),FLOOR(RAND() * 100)),
	(FLOOR(1 + RAND() * 15),FLOOR(1 + RAND() * 20),FLOOR(RAND() * 100)),
	(FLOOR(1 + RAND() * 15),FLOOR(1 + RAND() * 20),FLOOR(RAND() * 100)),
	(FLOOR(1 + RAND() * 15),FLOOR(1 + RAND() * 20),FLOOR(RAND() * 100)),
	(FLOOR(1 + RAND() * 15),FLOOR(1 + RAND() * 20),FLOOR(RAND() * 100)),
	(FLOOR(1 + RAND() * 15),FLOOR(1 + RAND() * 20),FLOOR(RAND() * 100));
SELECT value FROM storehouses_products ORDER BY FIELD(value,'0');
 
-- -------------------------------------------------------------------------------------------------------------------------------
-- Задание 4. 
-- Из таблицы users необходимо извлечь пользователей, родившихся в августе и мае. Месяцы заданы в виде списка английских названий ('may', 'august')
-- -------------------------------------------------------------------------------------------------------------------------------

SELECT * FROM users WHERE DATE_FORMAT(birthday_at,'%M') in ('may', 'august');

-- -------------------------------------------------------------------------------------------------------------------------------
-- Задание 5. 
-- Из таблицы catalogs извлекаются записи при помощи запроса. SELECT * FROM catalogs WHERE id IN (5, 1, 2); Отсортируйте записи в порядке, заданном в списке IN.
-- -------------------------------------------------------------------------------------------------------------------------------
SELECT * FROM catalogs WHERE id IN (5, 1, 2) ORDER BY FIELD(id, 5, 1, 2);


-- Практическое задание теме «Агрегация данных»

-- -------------------------------------------------------------------------------------------------------------------------------
-- Задание 1. 
-- Подсчитайте средний возраст пользователей в таблице users
-- -------------------------------------------------------------------------------------------------------------------------------

SELECT SUM((TIMESTAMPDIFF(YEAR, birthday_at , curdate()))) DIV count(birthday_at) FROM users;

-- -------------------------------------------------------------------------------------------------------------------------------
-- Задание 2. 
-- Подсчитайте количество дней рождения, которые приходятся на каждый из дней недели. Следует учесть, что необходимы дни недели текущего года, а не года рождения.
-- day - день недели(1 - понедельник, 2 - вторник, 3 - среда, 4 - четверг, 5 - пятница, 6 - суббота, 7 - воскресенье)
-- -------------------------------------------------------------------------------------------------------------------------------

SELECT COUNT(*) as stats from (SELECT DAYOFWEEK(CONCAT(YEAR(NOW()),'-',MONTH(birthday_at),'-',DAYOFMONTH(birthday_at))) as day from users) as stats where day=2;

-- -------------------------------------------------------------------------------------------------------------------------------
-- Задание 3.
-- Подсчитайте произведение чисел в столбце таблицы.
-- -------------------------------------------------------------------------------------------------------------------------------

CREATE TEMPORARY TABLE digital_sum (name INT(11));
INSERT INTO digital_sum (name) VALUES 
	(FLOOR(RAND() * 100)),
	(FLOOR(RAND() * 100)),
	(FLOOR(RAND() * 100)),
	(FLOOR(RAND() * 100)),
	(FLOOR(RAND() * 100)),
	(FLOOR(RAND() * 100)),
	(FLOOR(RAND() * 100)),
	(FLOOR(RAND() * 100)),
	(FLOOR(RAND() * 100)),
	(FLOOR(RAND() * 100)),
	(FLOOR(RAND() * 100)),
	(FLOOR(RAND() * 100)),
	(FLOOR(RAND() * 100));
SELECT * FROM digital_sum;
SELECT EXP(SUM(LN(name))) FROM digital_sum;